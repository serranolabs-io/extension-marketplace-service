/* tslint:disable */
/* eslint-disable */
/**
 * Extension Config API
 * API to submit and publish an ExtensionConfig object
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Config } from './Config';
import {
    ConfigFromJSON,
    ConfigFromJSONTyped,
    ConfigToJSON,
    ConfigToJSONTyped,
} from './Config';

/**
 * 
 * @export
 * @interface ExtensionConfig
 */
export interface ExtensionConfig {
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfig
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfig
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfig
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfig
     */
    id: string;
    /**
     * 
     * @type {Array<Config>}
     * @memberof ExtensionConfig
     */
    configs: Array<Config>;
    /**
     * 
     * @type {string}
     * @memberof ExtensionConfig
     */
    markdown: string;
    /**
     * 
     * @type {User}
     * @memberof ExtensionConfig
     */
    user: User;
}

/**
 * Check if a given object implements the ExtensionConfig interface.
 */
export function instanceOfExtensionConfig(value: object): value is ExtensionConfig {
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('configs' in value) || value['configs'] === undefined) return false;
    if (!('markdown' in value) || value['markdown'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function ExtensionConfigFromJSON(json: any): ExtensionConfig {
    return ExtensionConfigFromJSONTyped(json, false);
}

export function ExtensionConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensionConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['version'],
        'title': json['title'],
        'description': json['description'],
        'id': json['id'],
        'configs': ((json['configs'] as Array<any>).map(ConfigFromJSON)),
        'markdown': json['markdown'],
        'user': UserFromJSON(json['user']),
    };
}

export function ExtensionConfigToJSON(json: any): ExtensionConfig {
    return ExtensionConfigToJSONTyped(json, false);
}

export function ExtensionConfigToJSONTyped(value?: ExtensionConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': value['version'],
        'title': value['title'],
        'description': value['description'],
        'id': value['id'],
        'configs': ((value['configs'] as Array<any>).map(ConfigToJSON)),
        'markdown': value['markdown'],
        'user': UserToJSON(value['user']),
    };
}

